观察者模式Observer Pattern
又叫发布-订阅(Publish/Subscribe)模式、模型-视图(Model/View)模式、源-监听器(Source/Listener)模式或从属者(Dependents)模式。
定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。
这个主题对象在状态上发生变化时，会通知所有观察者对象，使它们能够自动更新自己。

观察者模式分为推模型和拉模型
推模型：
主题对象向观察者推送主题的详细信息，不管观察者是否需要，推送的信息通常是主题对象的全部或部分数据。
 
拉模型
主题对象在通知观察者的时候，只传递少量信息。如果观察者需要更具体的信息，由观察者主动到主题对象中获取
一般这种模型的实现中，会把主题对象自身通过update()方法传递给观察者，这样在观察者需要获取数据的时候，就可以通过这个引用来获取了

两种模式的比较

推模型是假定主题对象知道观察者需要的数据；
拉模型是主题对象不知道观察者具体需要什么数据，没有办法的情况下，干脆把自身传递给观察者，让观察者自己去按需要取值。

推模型可能会使得观察者对象难以复用，因为观察者的update()方法是按需要定义的参数，可能无法兼顾没有考虑到的使用情况。
这就意味着出现新情况的时候，就可能提供新的update()方法，或者是干脆重新实现观察者；
而拉模型就不会造成这样的情况，因为拉模型下，update()方法的参数是主题对象本身，
这基本上是主题对象能传递的最大数据集合了，基本上可以适应各种情况的需要。


JAVA提供的对观察者模式的支持
在JAVA语言的java.util库里面，提供了一个Observable类以及一个Observer接口，构成JAVA语言对观察者模式的支持

Observer接口
这个接口只定义了一个方法，即update()方法，
当被观察者对象的状态发生变化时，被观察者对象的notifyObservers()方法就会调用这一方法。
源码：
public interface Observer {

    void update(Observable o, Object arg);
}

Observable类
被观察者类都是java.util.Observable类的子类。
java.util.Observable提供公开的方法支持观察者对象，这些方法中有两个对Observable的子类非常重要：
一个是setChanged()，另一个是notifyObservers()。
第一方法setChanged()被调用之后会设置一个内部标记变量，代表被观察者对象的状态发生了变化。
第二个是notifyObservers()，这个方法被调用时，会调用所有登记过的观察者对象的update()方法，使这些观察者对象可以更新自己。

源码：
public class Observable {
    private boolean changed = false;
    private Vector obs;
   
    /** Construct an Observable with zero Observers. */

    public Observable() {
    	obs = new Vector();
    }

    /**
     * 将一个观察者添加到观察者聚集上面
     */
    public synchronized void addObserver(Observer o) {
        if (o == null)
            throw new NullPointerException();
    if (!obs.contains(o)) {
        obs.addElement(o);
    }
    }

    /**
     * 将一个观察者从观察者聚集上删除
     */
    public synchronized void deleteObserver(Observer o) {
        obs.removeElement(o);
    }

    public void notifyObservers() {
    	notifyObservers(null);
    }

    /**
     * 如果本对象有变化（那时hasChanged 方法会返回true）
     * 调用本方法通知所有登记的观察者，即调用它们的update()方法
     * 传入this和arg作为参数
     */
    public void notifyObservers(Object arg) {

        Object[] arrLocal;

    synchronized (this) {

        if (!changed)
                return;
            arrLocal = obs.toArray();
            clearChanged();
        }

        for (int i = arrLocal.length-1; i>=0; i--)
            ((Observer)arrLocal[i]).update(this, arg);
    }

    /**
     * 将观察者聚集清空
     */
    public synchronized void deleteObservers() {
    	obs.removeAllElements();
    }

    /**
     * 将“已变化”设置为true
     */
    protected synchronized void setChanged() {
    	changed = true;
    }

    /**
     * 将“已变化”重置为false
     */
    protected synchronized void clearChanged() {
    	changed = false;
    }

    /**
     * 检测本对象是否已变化
     */
    public synchronized boolean hasChanged() {
    	return changed;
    }

    /**
     * Returns the number of observers of this <tt>Observable</tt> object.
     *
     * @return  the number of observers of this object.
     */
    public synchronized int countObservers() {
    	return obs.size();
    }
}
这个类代表一个被观察者对象，有时称之为主题对象。
一个被观察者对象可以有数个观察者对象，每个观察者对象都是实现Observer接口的对象。
在被观察者发生变化时，会调用Observable的notifyObservers()方法
此方法调用所有的具体观察者的update()方法，从而使所有的观察者都被通知更新自己。