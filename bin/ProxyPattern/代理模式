代理模式
	提供了对目标对象另外的访问方式，即通过代理对象访问目标对象
	这样做的好处是:可以在目标对象实现的基础上,增强额外的功能操作,即扩展目标对象的功能.
	
	这里遵循开闭原则，不修改原有代码，通过	代理的方式来扩展新的功能。
	
代理模式的三个角色

ISubject：抽象主题角色，是一个接口。该接口是对象和它的代理共用的接口。
RealSubject：真实主题角色，是实现抽象主题接口的类。
Proxy：代理角色，内部含有对真实对象RealSubject的引用，从而可以操作真实对象。
		代理对象提供与真实对象相同的接口，以便在任何时刻都能代替真实对象。
		同时，代理对象可以在执行真实对象操作时，附加其他的操作，相当于对真实对象进行封装。
		
代理模式分为：虚拟代理、计数代理、远程代理、动态代理等。主要分为两类，静态代理和动态代理。

静态代理比较简单，是由程序员编写的代理类，并在程序运行前就编译好的，而不是由程序动态产生代理类，这就是所谓的静态。
实现动态代理的关键技术是反射。


动态代理与静态代理相比较，最大的好处是接口中声明的所有方法都被转移到调用处理器一个集中的方法中处理。
在接口方法数量比较多的时候，我们可以进行灵活处理，而不需要像静态代理那样对每一个方法或方法组合进行处理。
Proxy 很美很强大，但是仅支持 interface 代理。Java 的单继承机制注定了这些动态代理类们无法实现对 class 的动态代理。
好在有cglib为Proxy提供了弥补。




