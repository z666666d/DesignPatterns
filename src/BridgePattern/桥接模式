桥接模式Bridge
定义为：将抽象化(Abstraction)与实现化(Implementation)脱耦，使得二者可以独立地变化

桥接模式有三个关键词，抽象化、实现化和脱耦。理解这三个词是理解桥接模式的关键

抽象化
从众多的事物中抽取出共同的、本质性的特征，而舍弃其非本质的特征，就是抽象化。
要抽象，就必须进行比较，没有比较就无法找到在本质上共同的部分。
共同特征是指那些能把一类事物与他类事物区分开来的特征，这些具有区分作用的特征又称本质特征。
因此抽取事物的共同特征就是抽取事物的本质特征，舍弃非本质的特征。 所以抽象化的过程也是一个裁剪的过程。
在抽象时，同与不同，决定于从什么角度上来抽象。抽象的角度取决于分析问题的目的。
通常情况下，一组对象如果具有相同的特征，那么它们就可以通过一个共同的类来描述。
如果一些类具有相同的特征，往往可以通过一个共同的抽象类来描述。

实现化
针对某个抽象化给出的具体实现，就是实现化。
一个类的实例就是这个类的实例化，一个具体子类是它的抽象超类的实例化。

脱耦
所谓耦合，就是两个实体的行为的某种强关联。而将它们的强关联去掉，就是耦合的解脱，或称脱耦。
在这里，脱耦是指将抽象化和实现化之间的耦合解脱开，或者说是将它们之间的强关联改换成弱关联。
所谓强关联，就是在编译时期已经确定的，无法在运行时期动态改变的关联；
所谓弱关联，就是可以动态地确定并且可以在运行时期动态地改变的关联。
显然，在Java语言中，继承关系是强关联，而聚合关系是弱关联。

将两个角色之间的继承关系改为聚合关系，就是将它们之间的强关联改换成为弱关联。
因此，桥梁模式中的所谓脱耦，就是指在一个软件系统的抽象化和实现化之间使用聚合关系而不是继承关系，
从而使两者可以相对独立地变化。这就是桥梁模式的用意。

桥接模式有四个角色
抽象化(Abstraction)角色：抽象化给出的定义，并保存一个对实现化对象的引用。
修正抽象化(RefinedAbstraction)角色：扩展抽象化角色，改变和修正父类对抽象化的定义。
实现化(Implementor)角色：这个角色给出实现化角色的接口，但不给出具体的实现。
具体实现化(ConcreteImplementor)角色：这个角色给出实现化角色接口的具体实现。

抽象化角色就像是一个水杯的手柄，而实现化角色和具体实现化角色就像是水杯的杯身。
手柄控制杯身，这就是此模式别名“柄体”的来源。

抽象化等级结构中的方法通过向对应的实现化对象的委派实现自己的功能，
这意味着抽象化角色可以通过向不同的实现化对象委派，来达到动态地转换自己的功能的目的。

一般而言，实现化角色中的每个方法都应当有一个抽象化角色中的某一个方法与之对应，但是反过来则不一定。
换言之，抽象化角色的接口比实现化角色的接口宽。
抽象化角色除了提供与实现化角色相关的方法之外，还有可能提供其他的方法；
而实现化角色则往往仅为实现抽象化角色的相关行为而存在。

 
 
 桥梁模式的优点
 
 1.分离抽象和实现部分
 桥梁模式分离了抽象部分和实现部分，从而极大地提供了系统的灵活性。
 让抽象部分和实现部分独立出来，分别定义接口，这有助于对系统进行分层，从而产生更好的结构化的系统。
 
 2.更好的扩展性
 桥梁模式使得抽象部分和实现部分可以分别独立地扩展，而不会相互影响，从而大大提高了系统的可扩展性。


桥梁模式在Java中的使用
桥梁模式在Java应用中的一个非常典型的例子就是JDBC驱动器。
JDBC为所有的关系型数据库提供一个通用的界面。一个应用系统动态地选择一个合适的驱动器，
然后通过驱动器向数据库引擎发出指令。这个过程就是将抽象角色的行为委派给实现角色的过程。

抽象角色可以针对任何数据库引擎发出查询指令，因为抽象角色并不直接与数据库引擎打交道，JDBC驱动器负责这个底层的工作。
由于JDBC驱动器的存在，应用系统可以不依赖于数据库引擎的细节而独立地演化；
同时数据库引擎也可以独立于应用系统的细节而独立的演化。

JDBC的这种架构，把抽象部分和具体部分分离开来，从而使得抽象部分和具体部分都可以独立地扩展。
对于应用程序而言，只要选用不同的驱动，就可以让程序操作不同的数据库，而无需更改应用程序，从而实现在不同的数据库上移植
对于驱动程序而言，为数据库实现不同的驱动程序，并不会影响应用程序。













