package FactoryMethodPattern;

/**
 * 工厂方法模式：创建型设计模式之一，又叫做虚拟构造子(Virtual Constructor)模式或者多态性工厂（Polymorphic Factory）模式。
 * 工厂方法模式的核心思想是定义一个创建产品对象的接口，将实际的创建工作推迟到子类实现中去
 * 
 * 相较于简单工厂模式只有一个工厂类，工厂方法模式有多个具体工厂
 * 若产品类型相对较少，使用简单工厂没有问题，若有大量的产品类型，使用简单工厂模式会使得工厂类过于臃肿
 * 
 */

/**
 * 抽象工厂：工厂方法模式四个角色之一，为工厂方法模式的核心。
 * 任何在模式中创建对象的工厂类必须实现这个接口。在实际使用中，该角色也可以是抽象类
 * 
 * @author Administrator
 *
 */
public interface ExportFactory {

	public ExportFile factory(String type);
}
/**
 * 工厂方法模式和简单工厂模式比较
 * 1.工厂方法模式的核心为抽象工厂（一个抽象类或接口），而简单工厂模式的核心为一个具体类
 * 2.工厂方法模式的简化版就是简单工厂模式。
 * 		如果确定只需要一个具体工厂，那么就可以将抽象工厂和具体工厂合并到一个类中去
 * 		由于只有一个具体工厂，不妨把工厂方法改为静态方法，那么这个时候就是简单工厂模式了
 * 3.如果需要增加一个新的产品类型，那么需要做的只是在系统中增加该类型对应的工厂类，客户端代码没有必要修改
 * 		也没有必要修改抽象工厂和其他具体工厂。
 * 
 */
