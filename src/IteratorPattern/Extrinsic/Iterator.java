package IteratorPattern.Extrinsic;

/*
 * 白箱聚集与外禀迭代子
 * 
 * 如果一个聚集的接口提供了可以用来修改聚集元素的方法，这个接口就是所谓的宽接口。本例中的getElement()方法
 * 提供这种宽接口的聚集就叫做白箱聚集，但是这样会破坏聚集对象的封装
 * 
 * 外禀迭代子的意义
 * 既然白箱聚集已经向外界提供了遍历方法，客户端已经可以自行进行迭代了
 * 为什么还要应用迭代子模式，并创建一个迭代子对象进行迭代呢？
 * 
 * 客户端虽然可以自行迭代，但是迭代子对象和迭代模式会将迭代过程抽象化
 * 将作为迭代消费者的客户端与迭代负责人的迭代子责任分隔开，使得两者可以独立的演化。
 * 在聚集对象的种类发生变化，或者迭代的方法发生改变时，
 * 迭代子作为一个中介层可以吸收变化的因素，而避免修改客户端或者聚集本身。
 * 
 * 使用迭代器的意义在于将迭代的过程与聚集对象分割开来
 */

/*
 * 抽象迭代子(Iterator)角色：此抽象角色定义出遍历元素所需的接口。
 */
public interface Iterator {
	/**
	* 迭代方法：移动到第一个元素
	*/
	public void first();

	/**
	 * 迭代方法：移动到下一个元素
	 */
	public void next();

	/**
	 * 迭代方法：是否为最后一个元素
	 */
	public boolean isDone();

	/**
	 * 迭代方法：返还当前元素
	 */
	public Object currentItem();
}
