迭代器模式Iterator Pattern  又叫游标模式 Cursor 
迭代器模式可以顺序的访问一个聚集中的元素，而不必暴露聚集的内部表象

聚集和JAVA聚集（集合）
多个对象聚在一起形成的总体称之为聚集(Aggregate)，聚集对象是能够包容一组对象的容器对象。
聚集依赖于聚集结构的抽象化，具有复杂化和多样性。数组就是最基本的聚集，也是其他的JAVA聚集对象的设计基础。
JAVA聚集对象是实现了共同的java.util.Collection接口的对象，是JAVA语言对聚集概念的直接支持。
JAVA语言提供了很多种聚集，包括Vector、ArrayList、HashSet、HashMap、Hashtable等，这些都是JAVA聚集的例子。

迭代子模式有两种实现方式，分别是白箱聚集与外禀迭代子和黑箱聚集与内禀迭代子。

白箱聚集：聚集对外提供一个方法，可以通过该方法对聚集进行迭代，这个方法的提供打破了聚集的封装性
外禀迭代器：外禀迭代器在聚集外部，通过调用聚集对外暴露的方法进行迭代，迭代器本身保存一个游标索引

黑箱聚集：对外不提供任何能对聚集元素进行操作的方法，只能通过迭代器进行迭代操作
内禀迭代器：在聚集内部以内部类的形式存在，由于在聚集内部可以直接操作聚集的内部结构进行迭代

主动迭代子和被动迭代子
主动迭代子：由客户端来控制迭代下一个元素的步骤，客户端会明显调用迭代子的next()等迭代方法，在遍历过程中向前进行。
被动迭代子：由迭代子自己来控制迭代下一个元素的步骤，如果想要在迭代的过程中完成工作的话，客户端就需要把操作传递给迭代子
总体来说主动迭代器比被动迭代器要灵活一些，因此我们常见的实现多属于主动迭代子。

静态迭代子和动态迭代子

静态迭代器由聚集对象创建，并持有聚集对象的一份快照(snapshot)，在产生后这个快照的内容就不再变化。
客户端可以继续修改原聚集的内容，但是迭代子对象不会反映出聚集的新变化。

静态迭代子的好处是它的安全性和简易性，换言之，静态迭代子易于实现，不容易出现错误。
但是由于静态迭代子将原聚集复制了一份，因此它的短处是对时间和内存资源的消耗。

动态迭代子则与静态迭代子完全相反，在迭代子被产生之后，迭代子保持着对聚集元素的引用，
因此，任何对原聚集内容的修改都会在迭代子对象上反映出来。

完整的动态迭代子不容易实现，但是简化的动态迭代子并不难实现。大多数JAVA设计师遇到的迭代子都是这种简化的动态迭代子。

Fail Fast
如果一个算法开始之后，它的运算环境发生变化，使得算法无法进行必需的调整时，这个算法就应当立即发出故障信号。
如果聚集对象的元素在一个动态迭代子的迭代过程中发生变化时，迭代过程会受到影响而变得不能自恰。
这时候，迭代子就应当立即抛出一个异常。这种迭代子就是实现了Fail Fast功能的迭代子。

Fail Fast在JAVA聚集中的使用
JAVA语言以接口java.util.Iterator的方式支持迭代子模式，Collection接口要求提供iterator()方法，此方法在调用时返还一个Iterator类型的对象。
而作为Collection接口的子类型，AbstractList类的内部成员类Itr便是实现Iterator接口的类。

Itr类的源代码如下所示
private class Itr implements Iterator<E> {
        /**
         * Index of element to be returned by subsequent call to next.
         */
        int cursor = 0;

        /**
         * Index of element returned by most recent call to next or
         * previous.  Reset to -1 if this element is deleted by a call
         * to remove.
         */
        int lastRet = -1;

        /**
         * The modCount value that the iterator believes that the backing
         * List should have.  If this expectation is violated, the iterator
         * has detected concurrent modification.
         */
        int expectedModCount = modCount;

        public boolean hasNext() {
                return cursor != size();
        }

        public E next() {
            checkForComodification();
            try {
            	E next = get(cursor);
            	lastRet = cursor++;
            	return next;
            } catch (IndexOutOfBoundsException e) {
            	checkForComodification();
            	throw new NoSuchElementException();
            }
        }

        public void remove() {
            if (lastRet == -1)
           		throw new IllegalStateException();
            checkForComodification();

            try {
            	AbstractList.this.remove(lastRet);
	            if (lastRet < cursor)
	                cursor--;
	            lastRet = -1;
	            expectedModCount = modCount;
            } catch (IndexOutOfBoundsException e) {
            	throw new ConcurrentModificationException();
            }
        }

        final void checkForComodification() {
            if (modCount != expectedModCount)
            	throw new ConcurrentModificationException();
        }
    }

从Itr类的源代码中可以看到，方法checkForComodification()会检查聚集的内容是否刚刚被外界直接修改过(不是通过迭代子提供的方法修改的)
如果在迭代开始后，聚集的内容被外界绕过迭代子对象而直接修改的话，这个方法会立即抛出ConcurrentModificationException()异常。
这就是说，AbstractList.Itr迭代子是一个Fail Fast的迭代子。

迭代子模式的优点
1.迭代子模式简化了聚集的接口。迭代子具备了一个遍历接口，这样聚集的接口就不必具备遍历接口。
2.每一个聚集对象都可以有一个或多个迭代子对象，每一个迭代子的迭代状态可以是彼此独立的。
	因此，一个聚集对象可以同时有几个迭代在进行之中。
3.由于遍历算法被封装在迭代子角色里面，因此迭代的算法可以独立于聚集角色变化。

