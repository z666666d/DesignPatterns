分派的概念

变量被声明时的类型叫做变量的静态类型(Static Type)
而变量所引用的对象的真实类型又叫做变量的实际类型(Actual Type)

如：
List list = null;
list = new ArrayList();

声明了一个变量list，它的静态类型（也叫明显类型）是List，而它的实际类型是ArrayList。

根据对象的类型而对方法进行的选择，就是分派(Dispatch)，分派(Dispatch)又分为两种，即静态分派和动态分派。

静态分派(Static Dispatch)发生在编译时期，分派根据静态类型信息发生。静态分派对于我们来说并不陌生，方法重载就是静态分派。
动态分派(Dynamic Dispatch)发生在运行时期，动态分派动态地置换掉某个方法。


分派的类型
一个方法所属的对象叫做方法的接收者，方法的接收者与方法的参数统称做方法的宗量。

比如下面例子中的Test类：
public class Test {

    public void print(String str){
        System.out.println(str);
    }
}

print()方法属于Test对象，所以它的接收者也就是Test对象了
print()方法有一个参数是str,它的类型是String。

根据分派可以基于多少种宗量，可以将面向对象的语言划分为单分派语言(Uni-Dispatch)和多分派语言(Multi-Dispatch)。
单分派语言根据一个宗量的类型进行对方法的选择，多分派语言根据多于一个的宗量的类型对方法进行选择。

C++和Java均是单分派语言，多分派语言的例子包括CLOS和Cecil。

按照这样的区分，Java就是动态的单分派语言，因为这种语言的动态分派仅仅会考虑到方法的接收者的类型，
同时又是静态的多分派语言,因为这种语言对重载方法的分派会考虑到方法的接收者的类型以及方法的所有参数的类型。

在一个支持动态单分派的语言里面，有两个条件决定了一个请求会调用哪一个操作：
一是请求的名字，二是接收者的真实类型。

单分派限制了方法的选择过程，使得只有一个宗量可以被考虑到，这个宗量通常就是方法的接收者。
在Java语言里面，如果一个操作是作用于某个类型不明的对象上面，
那么对这个对象的真实类型测试仅会发生一次，这就是动态的单分派的特征。

双重分派
一个方法根据两个宗量的类型来决定执行不同的代码，这就是“双重分派”。
Java语言不支持动态的多分派，也就意味着Java不支持动态的双分派。
但是通过使用设计模式，也可以在Java语言里实现动态的双重分派。