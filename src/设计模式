什么是设计模式：
	一种完善的程序设计总结方式。在长期的实践中，不断完善形成的一种简单高效、复用性极高的、被大量重复使用后被证实有效的编码方式
	设计模式是解决问题最行之有效的设计思想，思想是核心
	具有被反复验证高效、多数人知晓、经过分类编目、代码设计经验总结、代码重用性高、更易于被人们理解、代码的可靠性和健壮性等特点
	
设计模式的原则：
总原则-开闭原则：
	对扩展开放、对修改关闭。
	在程序需要修改时，不能去修改原有代码，而是要扩展原有代码，实现一个热插拔的效果。
	目的：为了使程序的扩展性更好，易于维护和升级

六大原则

1.单一职责原则(Simple Responsibility Principle,SRP)
	一个类只应该有一个职责，如果有多个就把它拆分成多个类

2.里氏替换原则(Liskov  Substitution Principle,LSP)
	面向对象的基本原则之一。任何基类可以出现的地方，子类一定可以出现。
	继承复用的基石，只有当子类能够替换掉基类，整个系统的功能不受影响，基类才能被真正的复用，而子类也才能在基类的基础上增加新的功能
	里氏替换原则是对开闭原则的补充。开闭原则的关键是抽象化，里氏替换原则是对实现抽象化步骤的具体规范。

3.依赖倒置原则(Dependence Inversion Principle,DIP)
	也叫依赖注入或依赖倒转。面向接口编程，依赖于抽象而不是具体实现。
	代码中用到具体类时，不与具体类交互，而与具体类的上层接口交互

4.接口隔离原则(Interface Segregation Principle,ISP)
	每个接口中不存在子类用不到却必须实现的方法，如果有，就要将接口拆分，使用多个隔离接口，比使用单个接口要好
	降低耦合，降低依赖

5.迪米特法则(Law of Demeter,LOD)
	又叫最少知道原则。一个类对自己依赖的类知道的越少越好。无论依赖类多么复杂，都应该将逻辑封装到方法内部
	这样当依赖类被改变时，才能使该类受到最小的影响甚至没有影响。
	最少知道原则的另一种表达：只与直接的朋友通信。
	类之间只要有耦合关系，就叫朋友关系。耦合分为依赖、关联、聚合、组合等
	我们称成员变量、方法参数、方法返回值中的类为直接朋友。局部变量、临时变量则不是直接朋友，一般要求陌生类不要作为局部变量出现

6.合成复用原则(Composite Reuse Principle,CRP)
	在面向对象设计中，有两种基本的代码复用方式：继承和组合
	继承：实现简单，便于扩展，但是破坏了系统的封装性
	组合：耦合性相对较低，可以选择性的调用成员对象的操作。
	合成复用原则：尽力使用对象组合而不是继承达到代码复用的原则

设计模式分为三大类：
1.创造型模式。共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。
					另外还有一种简单工厂模式，但是并不属于23中设计模式之一
2.结构型模式。共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式
3.行为型模式。共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式
						状态模式、访问者模式、中介者模式、解释器模式
还有另外两类：并发型模式和线程池模式。



